"""
Django settings for interjornada_system project.

Generated by 'django-admin startproject' using Django 4.2.0.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

import os
from pathlib import Path
from decouple import config
import pytz

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = config('SECRET_KEY', default='django-insecure-change-me-in-production')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = config('DEBUG', default=True, cast=bool)

ALLOWED_HOSTS = config('ALLOWED_HOSTS', default='localhost,127.0.0.1,testserver,0.0.0.0', cast=lambda v: [s.strip() for s in v.split(',')])

# Application definition
DJANGO_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
]

THIRD_PARTY_APPS = [
    'rest_framework',
    'corsheaders',
    'channels',
]

LOCAL_APPS = [
    'apps.authentication',
    'apps.core',
    'apps.devices',
    'apps.employees',
    'apps.employee_sessions',
    'apps.logs',
    'apps.interjornada',
    'apps.dashboard',
]

INSTALLED_APPS = DJANGO_APPS + THIRD_PARTY_APPS + LOCAL_APPS

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'apps.authentication.middleware.AuthMiddleware',  # Middleware de proteção
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'interjornada_system.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'interjornada_system.wsgi.application'
ASGI_APPLICATION = 'interjornada_system.asgi.application'

# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
        'OPTIONS': {
            'timeout': 30,  # Timeout de 30 segundos para operações de banco
        }
    }
}

# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = 'pt-br'
TIME_ZONE = 'America/Sao_Paulo'  # Timezone do Brasil (UTC-3)
USE_I18N = True
USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = '/static/'
STATIC_ROOT = BASE_DIR / 'staticfiles'
STATICFILES_DIRS = [
    BASE_DIR / 'static',
]

MEDIA_URL = '/media/'
MEDIA_ROOT = BASE_DIR / 'media'

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Configurações de monitoramento automático de logs
LOG_MONITOR_INTERVAL = 1  # Intervalo em segundos entre verificações (1s para interjornada)
LOG_MONITOR_BATCH_SIZE = 20  # Tamanho do lote para processamento (reduzido para resposta mais rápida)
LOG_MONITOR_DEVICE_ID = 1  # ID do dispositivo para monitorar
LOG_MONITOR_AUTO_START = True  # Iniciar monitoramento automaticamente

# REST Framework
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework.authentication.SessionAuthentication',
        'rest_framework.authentication.TokenAuthentication',
    ],
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAuthenticated',
    ],
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
    'PAGE_SIZE': 50,
    'DEFAULT_RENDERER_CLASSES': [
        'rest_framework.renderers.JSONRenderer',
    ],
}

# CORS Settings
CORS_ALLOWED_ORIGINS = [
    "http://localhost:3000",
    "http://127.0.0.1:3000",
    "http://localhost:8000",
    "http://127.0.0.1:8000",
]

CORS_ALLOW_CREDENTIALS = True

# Channels (WebSocket)
CHANNEL_LAYERS = {
    'default': {
        'BACKEND': 'channels_redis.core.RedisChannelLayer',
        'CONFIG': {
            "hosts": [config('REDIS_URL', default='redis://localhost:6379/1')],
        },
    },
}

# Redis Configuration
REDIS_URL = config('REDIS_URL', default='redis://localhost:6379/0')

# Celery Configuration
CELERY_BROKER_URL = config('CELERY_BROKER_URL', default='redis://localhost:6379/0')
CELERY_RESULT_BACKEND = config('CELERY_RESULT_BACKEND', default='redis://localhost:6379/0')
CELERY_ACCEPT_CONTENT = ['json']
CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_SERIALIZER = 'json'
CELERY_TIMEZONE = TIME_ZONE

# =============================================================================
# CONFIGURAÇÕES DO SISTEMA DE INTERJORNADA
# =============================================================================

# Configurações do Dispositivo Principal (IDFace)
PRIMARY_DEVICE_IP = config('PRIMARY_DEVICE_IP', default='192.168.1.251')
PRIMARY_DEVICE_PORT = config('PRIMARY_DEVICE_PORT', default=443, cast=int)
PRIMARY_DEVICE_USERNAME = config('PRIMARY_DEVICE_USERNAME', default='admin')
PRIMARY_DEVICE_PASSWORD = config('PRIMARY_DEVICE_PASSWORD', default='admin')
PRIMARY_DEVICE_USE_HTTPS = config('PRIMARY_DEVICE_USE_HTTPS', default=True, cast=bool)

# Configurações do Dispositivo Secundário (Opcional)
SECONDARY_DEVICE_IP = config('SECONDARY_DEVICE_IP', default='192.168.1.252')
SECONDARY_DEVICE_PORT = config('SECONDARY_DEVICE_PORT', default=80, cast=int)
SECONDARY_DEVICE_USERNAME = config('SECONDARY_DEVICE_USERNAME', default='admin')
SECONDARY_DEVICE_PASSWORD = config('SECONDARY_DEVICE_PASSWORD', default='admin')
SECONDARY_DEVICE_USE_HTTPS = config('SECONDARY_DEVICE_USE_HTTPS', default=False, cast=bool)

# Configurações de Timezone
TIMEZONE_OFFSET = config('TIMEZONE_OFFSET', default=-3, cast=int)  # UTC-3 para Brasil
DISPLAY_TIMEZONE = config('DISPLAY_TIMEZONE', default='America/Sao_Paulo')

# Configurações de Tempo de Trabalho e Interjornada
WORK_DURATION_MINUTES = config('WORK_DURATION_MINUTES', default=480, cast=int)  # 8 horas
REST_DURATION_MINUTES = config('REST_DURATION_MINUTES', default=672, cast=int)  # 11.2 horas

# Configurações de Monitoramento
MONITOR_INTERVAL_SECONDS = config('MONITOR_INTERVAL_SECONDS', default=3, cast=int)
GIRO_VALIDATION_TIMEOUT_SECONDS = config('GIRO_VALIDATION_TIMEOUT_SECONDS', default=3, cast=int)

# Configurações de Timeout
DEVICE_CONNECTION_TIMEOUT = config('DEVICE_CONNECTION_TIMEOUT', default=15, cast=int)
DEVICE_REQUEST_TIMEOUT = config('DEVICE_REQUEST_TIMEOUT', default=10, cast=int)

# Configurações de Reconexão
MAX_RECONNECTION_ATTEMPTS = config('MAX_RECONNECTION_ATTEMPTS', default=10, cast=int)
BASE_RECONNECTION_DELAY = config('BASE_RECONNECTION_DELAY', default=2, cast=int)
MAX_RECONNECTION_DELAY = config('MAX_RECONNECTION_DELAY', default=60, cast=int)

# Configurações de Cache
WHITELIST_CACHE_DURATION = config('WHITELIST_CACHE_DURATION', default=3600, cast=int)  # 1 hora
API_CACHE_DURATION = config('API_CACHE_DURATION', default=60, cast=int)  # 1 minuto

# Configurações de Logs
LOG_RETENTION_DAYS = config('LOG_RETENTION_DAYS', default=30, cast=int)
MAX_LOG_ENTRIES = config('MAX_LOG_ENTRIES', default=10000, cast=int)

# Configurações de Grupo de Exceção
EXEMPTION_GROUP_NAME = config('EXEMPTION_GROUP_NAME', default='whitelist')

# Configurações de Reinício Automático
RESTART_TIMES = config('RESTART_TIMES', default='', cast=lambda v: [s.strip() for s in v.split(',') if s.strip()])

# Configurações de Ciclo
CYCLE_TIMEOUT_HOURS = config('CYCLE_TIMEOUT_HOURS', default=48, cast=int)
MIN_CYCLE_DURATION_MINUTES = config('MIN_CYCLE_DURATION_MINUTES', default=5, cast=int)

# Configurações de Erro
MAX_401_ERRORS = config('MAX_401_ERRORS', default=5, cast=int)
ERROR_COOLDOWN_MINUTES = config('ERROR_COOLDOWN_MINUTES', default=5, cast=int)

# Configurações de WebSocket
WEBSOCKET_HEARTBEAT_INTERVAL = config('WEBSOCKET_HEARTBEAT_INTERVAL', default=30, cast=int)
WEBSOCKET_CLEANUP_INTERVAL = config('WEBSOCKET_CLEANUP_INTERVAL', default=60, cast=int)

# Configurações de Dashboard
DASHBOARD_REFRESH_INTERVAL = config('DASHBOARD_REFRESH_INTERVAL', default=3, cast=int)
MODAL_AUTO_CLOSE_SECONDS = config('MODAL_AUTO_CLOSE_SECONDS', default=8, cast=int)

# Configurações de Áudio
AUDIO_FILE_PATH = config('AUDIO_FILE_PATH', default='static/audio/agurade.mp3')
AUDIO_ENABLED = config('AUDIO_ENABLED', default=True, cast=bool)

# Configurações de SSL
SSL_VERIFY = config('SSL_VERIFY', default=False, cast=bool)  # Para dispositivos IoT

# Configurações de Debug
DEVICE_DEBUG = config('DEVICE_DEBUG', default=False, cast=bool)
LOG_LEVEL = config('LOG_LEVEL', default='INFO')

# Configurações de Performance
BATCH_SIZE = config('BATCH_SIZE', default=100, cast=int)
MAX_CONCURRENT_REQUESTS = config('MAX_CONCURRENT_REQUESTS', default=10, cast=int)

# Configurações de Backup
BACKUP_ENABLED = config('BACKUP_ENABLED', default=True, cast=bool)
BACKUP_INTERVAL_HOURS = config('BACKUP_INTERVAL_HOURS', default=24, cast=int)
BACKUP_RETENTION_DAYS = config('BACKUP_RETENTION_DAYS', default=7, cast=int)

# Configurações de Notificação
NOTIFICATION_ENABLED = config('NOTIFICATION_ENABLED', default=True, cast=bool)
EMAIL_NOTIFICATIONS = config('EMAIL_NOTIFICATIONS', default=False, cast=bool)
SMS_NOTIFICATIONS = config('SMS_NOTIFICATIONS', default=False, cast=bool)

# Configurações de Segurança
SESSION_COOKIE_AGE = config('SESSION_COOKIE_AGE', default=3600, cast=int)  # 1 hora
CSRF_COOKIE_AGE = config('CSRF_COOKIE_AGE', default=3600, cast=int)  # 1 hora

# Configurações de Rate Limiting
RATE_LIMIT_ENABLED = config('RATE_LIMIT_ENABLED', default=True, cast=bool)
RATE_LIMIT_REQUESTS = config('RATE_LIMIT_REQUESTS', default=100, cast=int)
RATE_LIMIT_WINDOW = config('RATE_LIMIT_WINDOW', default=60, cast=int)  # segundos

# Logging Configuration
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '{levelname} {asctime} {module} {process:d} {thread:d} {message}',
            'style': '{',
        },
        'simple': {
            'format': '{levelname} {message}',
            'style': '{',
        },
    },
    'handlers': {
        'file': {
            'level': 'INFO',
            'class': 'logging.FileHandler',
            'filename': BASE_DIR / 'logs' / 'django.log',
            'formatter': 'verbose',
        },
        'console': {
            'level': 'DEBUG',
            'class': 'logging.StreamHandler',
            'formatter': 'simple',
        },
        'device_file': {
            'level': 'INFO',
            'class': 'logging.FileHandler',
            'filename': BASE_DIR / 'logs' / 'device.log',
            'formatter': 'verbose',
        },
        'interjornada_file': {
            'level': 'INFO',
            'class': 'logging.FileHandler',
            'filename': BASE_DIR / 'logs' / 'interjornada.log',
            'formatter': 'verbose',
        },
    },
    'loggers': {
        'django': {
            'handlers': ['file', 'console'],
            'level': 'INFO',
            'propagate': True,
        },
        'apps.devices': {
            'handlers': ['device_file', 'console'],
            'level': 'INFO',
            'propagate': False,
        },
        'apps.interjornada': {
            'handlers': ['interjornada_file', 'console'],
            'level': 'INFO',
            'propagate': False,
        },
    },
}

# Configurações de autenticação
LOGIN_REDIRECT_URL = '/admin/'
LOGIN_URL = '/admin/login/'

# Criar diretório de logs se não existir
os.makedirs(BASE_DIR / 'logs', exist_ok=True)
