"""
Comando Django para monitoramento cont√≠nuo de logs com sequ√™ncia correta.
"""
import time
import signal
import sys
from datetime import datetime, timezone
from django.core.management.base import BaseCommand
from django.db import transaction
from apps.devices.device_client import DeviceClient
from apps.logs.models import AccessLog, SystemLog
from apps.employees.models import Employee


class Command(BaseCommand):
    help = 'Monitora logs da catraca continuamente, processando apenas logs novos em sequ√™ncia'

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.running = False
        self.client = None
        self.last_processed_id = 0
        self.consecutive_errors = 0
        self.max_consecutive_errors = 5

    def add_arguments(self, parser):
        parser.add_argument(
            '--interval',
            type=int,
            default=5,
            help='Intervalo de verifica√ß√£o em segundos (padr√£o: 5)',
        )
        parser.add_argument(
            '--batch-size',
            type=int,
            default=50,
            help='Tamanho do lote para processamento (padr√£o: 50)',
        )
        parser.add_argument(
            '--device-id',
            type=int,
            default=1,
            help='ID do dispositivo para monitorar (padr√£o: 1)',
        )
        parser.add_argument(
            '--start-from-last',
            action='store_true',
            help='Come√ßar a partir do √∫ltimo log processado no banco',
        )
        parser.add_argument(
            '--force-start-id',
            type=int,
            help='For√ßar in√≠cio a partir de um ID espec√≠fico',
        )

    def handle(self, *args, **options):
        # Configurar handler para Ctrl+C
        signal.signal(signal.SIGINT, self.signal_handler)
        signal.signal(signal.SIGTERM, self.signal_handler)
        
        interval = max(options['interval'], 3)  # M√≠nimo 3 segundos
        batch_size = min(options['batch_size'], 100)  # M√°ximo 100 logs por lote
        device_id = options['device_id']
        start_from_last = options['start_from_last']
        force_start_id = options.get('force_start_id')
        
        self.stdout.write("üîÑ Iniciando monitoramento cont√≠nuo de logs...")
        self.stdout.write(f"‚öôÔ∏è Configura√ß√µes:")
        self.stdout.write(f"   üìä Intervalo: {interval}s")
        self.stdout.write(f"   üìã Tamanho do lote: {batch_size}")
        self.stdout.write(f"   üì± Dispositivo ID: {device_id}")
        
        try:
            # Conectar √† catraca
            self.client = DeviceClient()
            if not self.client.is_connected():
                self.stdout.write(self.style.ERROR("‚ùå N√£o foi poss√≠vel conectar √† catraca"))
                return
            
            self.stdout.write("‚úÖ Conectado √† catraca com sucesso!")
            
            # Determinar ID inicial
            if force_start_id:
                self.last_processed_id = force_start_id
                self.stdout.write(f"üéØ ID inicial for√ßado: {self.last_processed_id}")
            elif start_from_last:
                self.last_processed_id = self.get_last_processed_id()
                self.stdout.write(f"üìä √öltimo ID processado no banco: {self.last_processed_id}")
            else:
                # Buscar o menor ID dispon√≠vel na catraca
                self.last_processed_id = self.get_min_available_id()
                self.stdout.write(f"üîç Menor ID dispon√≠vel na catraca: {self.last_processed_id}")
            
            # Contadores
            total_processed = 0
            total_saved = 0
            total_errors = 0
            start_time = datetime.now()
            
            self.stdout.write(f"\nüöÄ Monitoramento iniciado em {start_time.strftime('%H:%M:%S')}")
            self.stdout.write("Pressione Ctrl+C para parar...\n")
            
            self.running = True
            
            while self.running:
                try:
                    # Buscar logs novos em sequ√™ncia
                    new_logs = self.get_logs_in_sequence(batch_size)
                    
                    if new_logs:
                        self.stdout.write(f"üìã {len(new_logs)} logs encontrados (ID {new_logs[0]['id']} - {new_logs[-1]['id']})")
                        
                        # Processar logs em sequ√™ncia
                        saved_count, error_count, sequence_errors = self.process_logs_sequence(new_logs, device_id)
                        total_saved += saved_count
                        total_errors += error_count
                        
                        # Atualizar √∫ltimo ID processado
                        if new_logs:
                            self.last_processed_id = new_logs[-1]['id']
                        
                        # Log de progresso
                        if saved_count > 0:
                            self.stdout.write(f"   ‚úÖ {saved_count} logs salvos")
                        if error_count > 0:
                            self.stdout.write(f"   ‚ùå {error_count} erros")
                        if sequence_errors > 0:
                            self.stdout.write(f"   ‚ö†Ô∏è {sequence_errors} erros de sequ√™ncia")
                        
                        # Reset contador de erros consecutivos
                        self.consecutive_errors = 0
                    else:
                        # Mostrar status a cada 10 ciclos sem logs
                        if total_processed % 10 == 0:
                            self.stdout.write(f"üìã Nenhum log novo encontrado (√∫ltimo ID: {self.last_processed_id})")
                    
                    # Aguardar pr√≥ximo ciclo
                    time.sleep(interval)
                    
                except Exception as e:
                    self.stdout.write(self.style.ERROR(f"‚ùå Erro no ciclo: {e}"))
                    self.consecutive_errors += 1
                    total_errors += 1
                    
                    # Se muitos erros consecutivos, parar
                    if self.consecutive_errors >= self.max_consecutive_errors:
                        self.stdout.write(self.style.ERROR(f"‚ùå Muitos erros consecutivos ({self.consecutive_errors}). Parando monitoramento."))
                        break
                    
                    self.stdout.write(f"‚è≥ Aguardando {interval}s antes de tentar novamente...")
                    time.sleep(interval)
        
        except Exception as e:
            self.stdout.write(self.style.ERROR(f"‚ùå Erro cr√≠tico: {e}"))
        
        finally:
            # Estat√≠sticas finais
            end_time = datetime.now()
            duration = end_time - start_time
            
            self.stdout.write(f"\nüìä Estat√≠sticas do monitoramento:")
            self.stdout.write(f"   ‚è±Ô∏è Dura√ß√£o: {duration}")
            self.stdout.write(f"   üìã Logs processados: {total_processed}")
            self.stdout.write(f"   ‚úÖ Logs salvos: {total_saved}")
            self.stdout.write(f"   ‚ùå Erros: {total_errors}")
            self.stdout.write(f"   üéØ √öltimo ID processado: {self.last_processed_id}")
            if duration.total_seconds() > 0:
                self.stdout.write(f"   üìä Taxa: {total_saved/duration.total_seconds():.2f} logs/segundo")
            
            self.stdout.write(self.style.SUCCESS("‚úÖ Monitoramento finalizado"))
    
    def signal_handler(self, signum, frame):
        """Handler para sinais de interrup√ß√£o."""
        self.stdout.write(f"\nüõë Recebido sinal {signum}, finalizando monitoramento...")
        self.running = False
    
    def get_last_processed_id(self):
        """Obt√©m o √∫ltimo ID de log processado no banco."""
        try:
            last_log = AccessLog.objects.order_by('-device_log_id').first()
            return last_log.device_log_id if last_log else 0
        except Exception:
            return 0
    
    def get_min_available_id(self):
        """Obt√©m o menor ID dispon√≠vel na catraca."""
        try:
            # Buscar alguns logs para encontrar o menor ID
            logs = self.client.get_recent_access_logs(limit=100, min_id=0)
            if logs:
                return min(log['id'] for log in logs)
            return 0
        except Exception:
            return 0
    
    def get_logs_in_sequence(self, batch_size):
        """Busca logs em sequ√™ncia a partir do √∫ltimo ID processado."""
        try:
            # Buscar logs a partir do pr√≥ximo ID
            next_id = self.last_processed_id + 1
            logs = self.client.get_recent_access_logs(limit=batch_size, min_id=next_id)
            
            if not logs:
                return []
            
            # Verificar se os logs est√£o em sequ√™ncia
            expected_id = next_id
            sequence_logs = []
            
            for log in logs:
                log_id = log['id']
                
                # Se o ID n√£o for o esperado, h√° uma lacuna
                if log_id != expected_id:
                    self.stdout.write(f"‚ö†Ô∏è Lacuna na sequ√™ncia: esperado {expected_id}, encontrado {log_id}")
                    # Parar aqui para n√£o processar logs fora de sequ√™ncia
                    break
                
                sequence_logs.append(log)
                expected_id += 1
            
            return sequence_logs
            
        except Exception as e:
            self.stdout.write(f"‚ùå Erro ao buscar logs em sequ√™ncia: {e}")
            return []
    
    def process_logs_sequence(self, logs, device_id):
        """Processa uma lista de logs em sequ√™ncia."""
        saved_count = 0
        error_count = 0
        sequence_errors = 0
        
        for i, log in enumerate(logs):
            try:
                # Verificar se o log est√° na sequ√™ncia esperada
                expected_id = self.last_processed_id + i + 1
                if log['id'] != expected_id:
                    self.stdout.write(f"‚ö†Ô∏è Erro de sequ√™ncia: esperado {expected_id}, encontrado {log['id']}")
                    sequence_errors += 1
                    continue
                
                if self.process_single_log(log, device_id):
                    saved_count += 1
                else:
                    error_count += 1
                    
            except Exception as e:
                self.stdout.write(f"   ‚ùå Erro ao processar log {log.get('id')}: {e}")
                error_count += 1
        
        return saved_count, error_count, sequence_errors
    
    def process_single_log(self, log_data, device_id):
        """Processa um √∫nico log."""
        log_id = log_data.get('id')
        user_id = log_data.get('user_id')
        event = log_data.get('event')
        
        # Verificar se j√° foi processado
        if AccessLog.objects.filter(device_log_id=log_id).exists():
            return False  # J√° processado
        
        # Ignorar logs de sistema (user_id = 0)
        if user_id == 0:
            return False
        
        # Mapear evento para tipo
        event_type = self.map_event_type(event)
        
        # Obter nome do usu√°rio
        user_name = self.get_user_name(user_id)
        
        # Criar timestamp usando os dados brutos
        device_timestamp = self.parse_timestamp(log_data)
        
        # Criar log no banco
        with transaction.atomic():
            access_log = AccessLog.objects.create(
                device_log_id=log_id,
                user_id=user_id,
                user_name=user_name,
                event_type=event_type,
                event_description=event,
                device_id=device_id,
                device_name="Catraca Principal",
                portal_id=log_data.get('portal_id'),
                device_timestamp=device_timestamp,
                raw_data=log_data,
                processing_status='processed'
            )
            
            # Log do sistema
            SystemLog.log_info(
                f"Log processado: {user_name} - {event} (ID: {log_id})",
                category='device',
                user_id=user_id,
                user_name=user_name,
                device_id=device_id,
                details={'log_id': log_id, 'event': event}
            )
        
        return True
    
    def map_event_type(self, event):
        """Mapeia evento para tipo de log."""
        event_map = {
            'entry': 1,      # Entrada
            'exit': 2,       # Sa√≠da
            'denied': 3,     # Acesso Negado
            'error': 4,      # Erro de Leitura
            'timeout': 5,    # Timeout
            'maintenance': 6, # Manuten√ß√£o
            'authorized': 7, # Acesso Autorizado
            'blocked': 8,    # Acesso Bloqueado
        }
        return event_map.get(event, 1)  # Entrada por padr√£o
    
    def get_user_name(self, user_id):
        """Obt√©m nome do usu√°rio."""
        try:
            employee = Employee.objects.filter(device_id=user_id).first()
            return employee.name if employee else f"Usu√°rio {user_id}"
        except Exception:
            return f"Usu√°rio {user_id}"
    
    def parse_timestamp(self, log_data):
        """Converte timestamp para datetime usando o campo 'time' dos dados brutos."""
        try:
            # Usar o campo 'time' dos dados brutos (timestamp Unix)
            if isinstance(log_data, dict) and 'time' in log_data:
                timestamp_unix = log_data['time']
                if timestamp_unix:
                    # Converter timestamp Unix para datetime UTC
                    return datetime.fromtimestamp(int(timestamp_unix), tz=timezone.utc)
            
            # Fallback: tentar campo 'timestamp' se existir
            if isinstance(log_data, dict) and 'timestamp' in log_data:
                timestamp_str = log_data['timestamp']
                if timestamp_str:
                    if 'T' in timestamp_str:
                        # Formato ISO
                        if timestamp_str.endswith('Z'):
                            timestamp_str = timestamp_str[:-1] + '+00:00'
                        return datetime.fromisoformat(timestamp_str)
                    else:
                        # Formato timestamp Unix
                        return datetime.fromtimestamp(float(timestamp_str), tz=timezone.utc)
            
            # Se n√£o conseguir parsear, usar data atual
            return datetime.now(timezone.utc)
            
        except Exception as e:
            self.stdout.write(f"   ‚ö†Ô∏è Erro ao parsear timestamp: {e}")
            return datetime.now(timezone.utc)
